version: '3.8'

# Define services
services:
  # App backend service
  frostini:
    # Configuration for building the docker image for the backend service
    container_name: frostiniSpring
    hostname: frostiniSpring
    image: ghcr.io/sophjane/tqs-delivery-p1g2/frostini:latest
    build:
      context:  projFrostini/backend/frostini  # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
        - "8083:8083"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 120s
    depends_on:
      - postgres-db-frostini # This service depends on mysql. Start that first.
      - rabbitmq
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      backend-frostini:
        ipv4_address: 172.20.202.10
      backend:


  # Database Service (PostGres)
  postgres-db-frostini:
    image: postgres:11.12

    container_name: postgresdbfrostini
    hostname: postgresdbfrostini
    restart: unless-stopped
      #ports:
      #- 27117:27017
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=frostini

    volumes:
      - frostinidb:/var/lib/postgresql/frostiniData
    networks:
      backend-frostini:
        ipv4_address: 172.20.202.2

  # Database Service (PostGres)
  frostini-web:
    image: ghcr.io/sophjane/tqs-delivery-p1g2/frostini_web:latest
    build:
      context:  projFrostini/frontend/frostini-pwa-app  # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    container_name: frostiniWeb
    hostname: frostiniWeb
    restart: unless-stopped
    ports:
      - 3000:80
    networks:
      backend-frostini:
        ipv4_address: 172.20.202.3

  # App backend service
  delivera:
    # Configuration for building the docker image for the backend service
    container_name: deliveraSpring
    hostname: deliveraSpring
    image: ghcr.io/sophjane/tqs-delivery-p1g2/delivera:latest
    build:
      context: projDelivera/backend/delivera  # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 120s
    depends_on:
      - postgres-db-delivera # This service depends on mysql. Start that first.
      - rabbitmq

    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      backend-delivera:
        ipv4_address: 172.20.200.10
      backend:

  # Database Service (PostGres)
  postgres-db-delivera:
    image: postgres:11.12
    container_name: postgresdbdelivera
    hostname: postgresdbdelivera
    restart: unless-stopped
      #ports:
      #- 27117:27017
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=delivera

    volumes:
      - deliveradb:/var/lib/postgresql/deliveraData
    networks:
      backend-delivera:
        ipv4_address: 172.20.200.2


  delivera-web:
    image: ghcr.io/sophjane/tqs-delivery-p1g2/delivera_web:latest
    build:
      context: projDelivera/frontend/material-dashboard-react-main  # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    container_name: deliveraWeb
    hostname: deliveraWeb
    restart: unless-stopped
    ports:
      - 3001:80
    networks:
      backend-delivera:
        ipv4_address: 172.20.200.3


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: always
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=delivera
      - RABBITMQ_DEFAULT_PASS=delivera
    networks:
      - backend



volumes:
  frostinidb:
  deliveradb:

# Networks to be created to facilitate communication between containers
networks:
  backend-delivera:
    ipam:
      config:
        - subnet: "172.20.200.0/24"
  backend-frostini:
    ipam:
      config:
        - subnet: "172.20.202.0/24"
  backend:
    name: external-network
